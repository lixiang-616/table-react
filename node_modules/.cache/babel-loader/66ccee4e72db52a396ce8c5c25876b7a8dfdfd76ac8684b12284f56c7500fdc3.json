{"ast":null,"code":"import axios from'axios';import{message}from'antd';const request=axios.create();// 2.请求拦截器\nrequest.interceptors.request.use(config=>{// console.log(config, 'config');\n//发请求前做的一些处理，数据转化，配置请求头，设置token,设置loading等，根据需求去添加\nconst token='eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJseCIsImxvZ2luVHlwZSI6ImFjY291bnQiLCJpZCI6IkIwRDEzMTAzRDQwMjRGQjRCRTc5RTBBQ0Q5RUUzRjBFIiwiZXhwIjoxNzI1MDIxMDA1fQ.IwbKp0xgxh7z90tJxFn-blfoSEbbpymLL7E2o1jpF_bIcUAhAXOWz-HzyeHZhjl5DMJ1Ms-t50l_16PG7p9hvg';config.headers.Authorization=token;//如有需要：注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie\n//const token = getCookie('名称');//这里取token之前，你肯定需要先拿到token,存一下\n//if(token){\n//config.params = {'token':token} //如果要求携带在参数中\n//config.headers.token= token; //如果要求携带在请求头中\n//}\nreturn config;},error=>{Promise.reject(error);});// 响应拦截器\nrequest.interceptors.response.use(response=>{return response;},error=>{if(error&&error.response){// 1.公共错误处理\n// 2.根据响应码具体处理\nswitch(error.response.status){case 400:error.message='错误请求';break;case 401:error.message='未授权，请重新登录';break;case 403:error.message='拒绝访问';break;case 404:error.message='请求错误,未找到该资源';window.location.href=\"/NotFound\";break;case 405:error.message='请求方法未允许';break;case 408:error.message='请求超时';break;case 500:error.message='服务器端出错';break;case 501:error.message='网络未实现';break;case 502:error.message='网络错误';break;case 503:error.message='服务不可用';break;case 504:error.message='网络超时';break;case 505:error.message='http版本不支持该请求';break;default:error.message=`连接错误${error.response.status}`;}}else{// 超时处理\nif(JSON.stringify(error).includes('timeout')){message.error('服务器响应超时，请刷新当前页');}}return Promise.resolve(error.response);});export default request;","map":{"version":3,"names":["axios","message","request","create","interceptors","use","config","token","headers","Authorization","error","Promise","reject","response","status","window","location","href","JSON","stringify","includes","resolve"],"sources":["/Users/lixiang/李响/tableReact/src/utils/request.js"],"sourcesContent":["\nimport axios from 'axios'\nimport { message } from 'antd';\nconst request = axios.create()\n// 2.请求拦截器\nrequest.interceptors.request.use(config => {\n  // console.log(config, 'config');\n  //发请求前做的一些处理，数据转化，配置请求头，设置token,设置loading等，根据需求去添加\n  const token = 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJseCIsImxvZ2luVHlwZSI6ImFjY291bnQiLCJpZCI6IkIwRDEzMTAzRDQwMjRGQjRCRTc5RTBBQ0Q5RUUzRjBFIiwiZXhwIjoxNzI1MDIxMDA1fQ.IwbKp0xgxh7z90tJxFn-blfoSEbbpymLL7E2o1jpF_bIcUAhAXOWz-HzyeHZhjl5DMJ1Ms-t50l_16PG7p9hvg';\n  config.headers.Authorization = token;\n  //如有需要：注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie\n  //const token = getCookie('名称');//这里取token之前，你肯定需要先拿到token,存一下\n  //if(token){\n  //config.params = {'token':token} //如果要求携带在参数中\n  //config.headers.token= token; //如果要求携带在请求头中\n  //}\n  return config\n}, error => {\n  Promise.reject(error)\n})\n\n// 响应拦截器\nrequest.interceptors.response.use(response => {\n  return response\n}, error => {\n  if (error && error.response) {\n    // 1.公共错误处理\n    // 2.根据响应码具体处理\n    switch (error.response.status) {\n      case 400:\n        error.message = '错误请求'\n        break;\n      case 401:\n        error.message = '未授权，请重新登录'\n        break;\n      case 403:\n        error.message = '拒绝访问'\n        break;\n      case 404:\n        error.message = '请求错误,未找到该资源'\n        window.location.href = \"/NotFound\"\n        break;\n      case 405:\n        error.message = '请求方法未允许'\n        break;\n      case 408:\n        error.message = '请求超时'\n        break;\n      case 500:\n        error.message = '服务器端出错'\n        break;\n      case 501:\n        error.message = '网络未实现'\n        break;\n      case 502:\n        error.message = '网络错误'\n        break;\n      case 503:\n        error.message = '服务不可用'\n        break;\n      case 504:\n        error.message = '网络超时'\n        break;\n      case 505:\n        error.message = 'http版本不支持该请求'\n        break;\n      default:\n        error.message = `连接错误${error.response.status}`\n    }\n  } else {\n    // 超时处理\n    if (JSON.stringify(error).includes('timeout')) {\n      message.error('服务器响应超时，请刷新当前页')\n    }\n  }\n  return Promise.resolve(error.response)\n})\nexport default request"],"mappings":"AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,OAAO,KAAQ,MAAM,CAC9B,KAAM,CAAAC,OAAO,CAAGF,KAAK,CAACG,MAAM,CAAC,CAAC,CAC9B;AACAD,OAAO,CAACE,YAAY,CAACF,OAAO,CAACG,GAAG,CAACC,MAAM,EAAI,CACzC;AACA;AACA,KAAM,CAAAC,KAAK,CAAG,4PAA4P,CAC1QD,MAAM,CAACE,OAAO,CAACC,aAAa,CAAGF,KAAK,CACpC;AACA;AACA;AACA;AACA;AACA;AACA,MAAO,CAAAD,MAAM,CACf,CAAC,CAAEI,KAAK,EAAI,CACVC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CACvB,CAAC,CAAC,CAEF;AACAR,OAAO,CAACE,YAAY,CAACS,QAAQ,CAACR,GAAG,CAACQ,QAAQ,EAAI,CAC5C,MAAO,CAAAA,QAAQ,CACjB,CAAC,CAAEH,KAAK,EAAI,CACV,GAAIA,KAAK,EAAIA,KAAK,CAACG,QAAQ,CAAE,CAC3B;AACA;AACA,OAAQH,KAAK,CAACG,QAAQ,CAACC,MAAM,EAC3B,IAAK,IAAG,CACNJ,KAAK,CAACT,OAAO,CAAG,MAAM,CACtB,MACF,IAAK,IAAG,CACNS,KAAK,CAACT,OAAO,CAAG,WAAW,CAC3B,MACF,IAAK,IAAG,CACNS,KAAK,CAACT,OAAO,CAAG,MAAM,CACtB,MACF,IAAK,IAAG,CACNS,KAAK,CAACT,OAAO,CAAG,aAAa,CAC7Bc,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,WAAW,CAClC,MACF,IAAK,IAAG,CACNP,KAAK,CAACT,OAAO,CAAG,SAAS,CACzB,MACF,IAAK,IAAG,CACNS,KAAK,CAACT,OAAO,CAAG,MAAM,CACtB,MACF,IAAK,IAAG,CACNS,KAAK,CAACT,OAAO,CAAG,QAAQ,CACxB,MACF,IAAK,IAAG,CACNS,KAAK,CAACT,OAAO,CAAG,OAAO,CACvB,MACF,IAAK,IAAG,CACNS,KAAK,CAACT,OAAO,CAAG,MAAM,CACtB,MACF,IAAK,IAAG,CACNS,KAAK,CAACT,OAAO,CAAG,OAAO,CACvB,MACF,IAAK,IAAG,CACNS,KAAK,CAACT,OAAO,CAAG,MAAM,CACtB,MACF,IAAK,IAAG,CACNS,KAAK,CAACT,OAAO,CAAG,cAAc,CAC9B,MACF,QACES,KAAK,CAACT,OAAO,CAAG,OAAOS,KAAK,CAACG,QAAQ,CAACC,MAAM,EAAE,CAClD,CACF,CAAC,IAAM,CACL;AACA,GAAII,IAAI,CAACC,SAAS,CAACT,KAAK,CAAC,CAACU,QAAQ,CAAC,SAAS,CAAC,CAAE,CAC7CnB,OAAO,CAACS,KAAK,CAAC,gBAAgB,CAAC,CACjC,CACF,CACA,MAAO,CAAAC,OAAO,CAACU,OAAO,CAACX,KAAK,CAACG,QAAQ,CAAC,CACxC,CAAC,CAAC,CACF,cAAe,CAAAX,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}