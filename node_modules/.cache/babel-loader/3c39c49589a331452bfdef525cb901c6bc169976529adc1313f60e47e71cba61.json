{"ast":null,"code":"import axios from 'axios';\nimport { message } from 'antd';\nconst request = axios.create();\n// 2.请求拦截器\nrequest.interceptors.request.use(config => {\n  console.log(config, 'config');\n  //发请求前做的一些处理，数据转化，配置请求头，设置token,设置loading等，根据需求去添加\n  const token = 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJseCIsImxvZ2luVHlwZSI6ImFjY291bnQiLCJpZCI6IjhFMDgzMzdDQkNCNDRFMTZBMThCOTUxQ0NERDM1NTFFIiwiZXhwIjoxNzI1MDA3NTM4fQ.GAAM2fYGaVlBQfWPCTA81latVjQzvLu5fKrmQukxz2UkxVAs8HB_5o59yl0GXu-UTXNMtkYsvYV1gj9TiKx0Xg';\n  config.headers.Authorization = token;\n  //如有需要：注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie\n  //const token = getCookie('名称');//这里取token之前，你肯定需要先拿到token,存一下\n  //if(token){\n  //config.params = {'token':token} //如果要求携带在参数中\n  //config.headers.token= token; //如果要求携带在请求头中\n  //}\n  return config;\n});\n\n// 响应拦截器\nrequest.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error && error.response) {\n    // 1.公共错误处理\n    // 2.根据响应码具体处理\n    switch (error.response.status) {\n      case 400:\n        error.message = '错误请求';\n        break;\n      case 401:\n        error.message = '未授权，请重新登录';\n        break;\n      case 403:\n        error.message = '拒绝访问';\n        break;\n      case 404:\n        error.message = '请求错误,未找到该资源';\n        window.location.href = \"/NotFound\";\n        break;\n      case 405:\n        error.message = '请求方法未允许';\n        break;\n      case 408:\n        error.message = '请求超时';\n        break;\n      case 500:\n        error.message = '服务器端出错';\n        break;\n      case 501:\n        error.message = '网络未实现';\n        break;\n      case 502:\n        error.message = '网络错误';\n        break;\n      case 503:\n        error.message = '服务不可用';\n        break;\n      case 504:\n        error.message = '网络超时';\n        break;\n      case 505:\n        error.message = 'http版本不支持该请求';\n        break;\n      default:\n        error.message = `连接错误${error.response.status}`;\n    }\n  } else {\n    // 超时处理\n    if (JSON.stringify(error).includes('timeout')) {\n      message.error('服务器响应超时，请刷新当前页');\n    }\n    error.message = '连接服务器失败';\n  }\n  message.error(error.message);\n  return Promise.resolve(error.response);\n});\nexport default request;","map":{"version":3,"names":["axios","message","request","create","interceptors","use","config","console","log","token","headers","Authorization","response","error","status","window","location","href","JSON","stringify","includes","Promise","resolve"],"sources":["/Users/lixiang/李响/tableReact/src/utils/request.js"],"sourcesContent":["\nimport axios from 'axios'\nimport { message } from 'antd';\nconst request = axios.create()\n// 2.请求拦截器\nrequest.interceptors.request.use(config => {\n  console.log(config, 'config');\n  //发请求前做的一些处理，数据转化，配置请求头，设置token,设置loading等，根据需求去添加\n  const token = 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJseCIsImxvZ2luVHlwZSI6ImFjY291bnQiLCJpZCI6IjhFMDgzMzdDQkNCNDRFMTZBMThCOTUxQ0NERDM1NTFFIiwiZXhwIjoxNzI1MDA3NTM4fQ.GAAM2fYGaVlBQfWPCTA81latVjQzvLu5fKrmQukxz2UkxVAs8HB_5o59yl0GXu-UTXNMtkYsvYV1gj9TiKx0Xg';\n  config.headers.Authorization = token;\n  //如有需要：注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie\n  //const token = getCookie('名称');//这里取token之前，你肯定需要先拿到token,存一下\n  //if(token){\n  //config.params = {'token':token} //如果要求携带在参数中\n  //config.headers.token= token; //如果要求携带在请求头中\n  //}\n  return config\n})\n\n// 响应拦截器\nrequest.interceptors.response.use(response => {\n  return response\n}, error => {\n  if (error && error.response) {\n    // 1.公共错误处理\n    // 2.根据响应码具体处理\n    switch (error.response.status) {\n      case 400:\n        error.message = '错误请求'\n        break;\n      case 401:\n        error.message = '未授权，请重新登录'\n        break;\n      case 403:\n        error.message = '拒绝访问'\n        break;\n      case 404:\n        error.message = '请求错误,未找到该资源'\n        window.location.href = \"/NotFound\"\n        break;\n      case 405:\n        error.message = '请求方法未允许'\n        break;\n      case 408:\n        error.message = '请求超时'\n        break;\n      case 500:\n        error.message = '服务器端出错'\n        break;\n      case 501:\n        error.message = '网络未实现'\n        break;\n      case 502:\n        error.message = '网络错误'\n        break;\n      case 503:\n        error.message = '服务不可用'\n        break;\n      case 504:\n        error.message = '网络超时'\n        break;\n      case 505:\n        error.message = 'http版本不支持该请求'\n        break;\n      default:\n        error.message = `连接错误${error.response.status}`\n    }\n  } else {\n    // 超时处理\n    if (JSON.stringify(error).includes('timeout')) {\n      message.error('服务器响应超时，请刷新当前页')\n    }\n    error.message = '连接服务器失败'\n  }\n  message.error(error.message)\n  return Promise.resolve(error.response)\n})\nexport default request"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,MAAM;AAC9B,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC,CAAC;AAC9B;AACAD,OAAO,CAACE,YAAY,CAACF,OAAO,CAACG,GAAG,CAACC,MAAM,IAAI;EACzCC,OAAO,CAACC,GAAG,CAACF,MAAM,EAAE,QAAQ,CAAC;EAC7B;EACA,MAAMG,KAAK,GAAG,4PAA4P;EAC1QH,MAAM,CAACI,OAAO,CAACC,aAAa,GAAGF,KAAK;EACpC;EACA;EACA;EACA;EACA;EACA;EACA,OAAOH,MAAM;AACf,CAAC,CAAC;;AAEF;AACAJ,OAAO,CAACE,YAAY,CAACQ,QAAQ,CAACP,GAAG,CAACO,QAAQ,IAAI;EAC5C,OAAOA,QAAQ;AACjB,CAAC,EAAEC,KAAK,IAAI;EACV,IAAIA,KAAK,IAAIA,KAAK,CAACD,QAAQ,EAAE;IAC3B;IACA;IACA,QAAQC,KAAK,CAACD,QAAQ,CAACE,MAAM;MAC3B,KAAK,GAAG;QACND,KAAK,CAACZ,OAAO,GAAG,MAAM;QACtB;MACF,KAAK,GAAG;QACNY,KAAK,CAACZ,OAAO,GAAG,WAAW;QAC3B;MACF,KAAK,GAAG;QACNY,KAAK,CAACZ,OAAO,GAAG,MAAM;QACtB;MACF,KAAK,GAAG;QACNY,KAAK,CAACZ,OAAO,GAAG,aAAa;QAC7Bc,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,WAAW;QAClC;MACF,KAAK,GAAG;QACNJ,KAAK,CAACZ,OAAO,GAAG,SAAS;QACzB;MACF,KAAK,GAAG;QACNY,KAAK,CAACZ,OAAO,GAAG,MAAM;QACtB;MACF,KAAK,GAAG;QACNY,KAAK,CAACZ,OAAO,GAAG,QAAQ;QACxB;MACF,KAAK,GAAG;QACNY,KAAK,CAACZ,OAAO,GAAG,OAAO;QACvB;MACF,KAAK,GAAG;QACNY,KAAK,CAACZ,OAAO,GAAG,MAAM;QACtB;MACF,KAAK,GAAG;QACNY,KAAK,CAACZ,OAAO,GAAG,OAAO;QACvB;MACF,KAAK,GAAG;QACNY,KAAK,CAACZ,OAAO,GAAG,MAAM;QACtB;MACF,KAAK,GAAG;QACNY,KAAK,CAACZ,OAAO,GAAG,cAAc;QAC9B;MACF;QACEY,KAAK,CAACZ,OAAO,GAAG,OAAOY,KAAK,CAACD,QAAQ,CAACE,MAAM,EAAE;IAClD;EACF,CAAC,MAAM;IACL;IACA,IAAII,IAAI,CAACC,SAAS,CAACN,KAAK,CAAC,CAACO,QAAQ,CAAC,SAAS,CAAC,EAAE;MAC7CnB,OAAO,CAACY,KAAK,CAAC,gBAAgB,CAAC;IACjC;IACAA,KAAK,CAACZ,OAAO,GAAG,SAAS;EAC3B;EACAA,OAAO,CAACY,KAAK,CAACA,KAAK,CAACZ,OAAO,CAAC;EAC5B,OAAOoB,OAAO,CAACC,OAAO,CAACT,KAAK,CAACD,QAAQ,CAAC;AACxC,CAAC,CAAC;AACF,eAAeV,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}